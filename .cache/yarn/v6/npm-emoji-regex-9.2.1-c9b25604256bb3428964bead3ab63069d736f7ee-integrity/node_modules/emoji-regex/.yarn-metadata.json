{
  "manifest": {
    "name": "emoji-regex",
    "version": "9.2.1",
    "description": "A regular expression to match all Emoji-only symbols as per the Unicode Standard.",
    "homepage": "https://mths.be/emoji-regex",
    "main": "index.js",
    "types": "index.d.ts",
    "keywords": [
      "unicode",
      "regex",
      "regexp",
      "regular expressions",
      "code points",
      "symbols",
      "characters",
      "emoji"
    ],
    "license": "MIT",
    "author": {
      "name": "Mathias Bynens",
      "url": "https://mathiasbynens.be/"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/mathiasbynens/emoji-regex.git"
    },
    "bugs": {
      "url": "https://github.com/mathiasbynens/emoji-regex/issues"
    },
    "files": [
      "LICENSE-MIT.txt",
      "index.js",
      "index.d.ts",
      "RGI_Emoji.js",
      "text.js",
      "es2015/index.js",
      "es2015/RGI_Emoji.js",
      "es2015/text.js"
    ],
    "scripts": {
      "build": "rm -rf -- es2015; babel src -d .; NODE_ENV=es2015 babel src -d ./es2015; cp src/RGI_Emoji-pattern.txt .; node script/inject-sequences.js",
      "test": "mocha",
      "test:watch": "npm run test -- --watch"
    },
    "devDependencies": {
      "@babel/cli": "^7.4.4",
      "@babel/core": "^7.4.4",
      "@babel/plugin-proposal-unicode-property-regex": "^7.4.4",
      "@babel/preset-env": "^7.4.4",
      "@unicode/unicode-13.0.0": "^1.0.3",
      "mocha": "^6.1.4",
      "regexgen": "^1.3.0"
    },
    "_registry": "npm",
    "_loc": "/home/mini/.cache/yarn/v6/npm-emoji-regex-9.2.1-c9b25604256bb3428964bead3ab63069d736f7ee-integrity/node_modules/emoji-regex/package.json",
    "readmeFilename": "README.md",
    "readme": "# emoji-regex [![Build status](https://travis-ci.org/mathiasbynens/emoji-regex.svg?branch=master)](https://travis-ci.org/mathiasbynens/emoji-regex)\n\n_emoji-regex_ offers a regular expression to match all emoji symbols and sequences (including textual representations of emoji) as per the Unicode Standard.\n\nThis repository contains a script that generates this regular expression based on [Unicode data](https://github.com/node-unicode/node-unicode-data). Because of this, the regular expression can easily be updated whenever new emoji are added to the Unicode standard.\n\n## Installation\n\nVia [npm](https://www.npmjs.com/):\n\n```bash\nnpm install emoji-regex\n```\n\nIn [Node.js](https://nodejs.org/):\n\n```js\nconst emojiRegex = require('emoji-regex/RGI_Emoji.js');\n// Note: because the regular expression has the global flag set, this module\n// exports a function that returns the regex rather than exporting the regular\n// expression itself, to make it impossible to (accidentally) mutate the\n// original regular expression.\n\nconst text = `\n\\u{231A}: ‚åö default emoji presentation character (Emoji_Presentation)\n\\u{2194}\\u{FE0F}: ‚ÜîÔ∏è default text presentation character rendered as emoji\n\\u{1F469}: üë© emoji modifier base (Emoji_Modifier_Base)\n\\u{1F469}\\u{1F3FF}: üë©üèø emoji modifier base followed by a modifier\n`;\n\nconst regex = emojiRegex();\nlet match;\nwhile (match = regex.exec(text)) {\n  const emoji = match[0];\n  console.log(`Matched sequence ${ emoji } ‚Äî code points: ${ [...emoji].length }`);\n}\n```\n\nConsole output:\n\n```\nMatched sequence ‚åö ‚Äî code points: 1\nMatched sequence ‚åö ‚Äî code points: 1\nMatched sequence ‚ÜîÔ∏è ‚Äî code points: 2\nMatched sequence ‚ÜîÔ∏è ‚Äî code points: 2\nMatched sequence üë© ‚Äî code points: 1\nMatched sequence üë© ‚Äî code points: 1\nMatched sequence üë©üèø ‚Äî code points: 2\nMatched sequence üë©üèø ‚Äî code points: 2\n```\n\n## Regular expression flavors\n\nThe package comes with three distinct regular expressions:\n\n```js\n// This is the recommended regular expression to use. It matches all\n// emoji recommended for general interchange, as defined via the\n// `RGI_Emoji` property in the Unicode Standard.\n// https://unicode.org/reports/tr51/#def_rgi_set\n// When in doubt, use this!\nconst emojiRegexRGI = require('emoji-regex/RGI_Emoji.js');\n\n// This is the old regular expression, prior to `RGI_Emoji` being\n// standardized. In addition to all `RGI_Emoji` sequences, it matches\n// some emoji you probably don‚Äôt want to match (such as emoji component\n// symbols that are not meant to be used separately).\nconst emojiRegex = require('emoji-regex/index.js');\n\n// This regular expression matches even more emoji than the previous\n// one, including emoji that render as text instead of icons (i.e.\n// emoji that are not `Emoji_Presentation` symbols and that aren‚Äôt\n// forced to render as emoji by a variation selector).\nconst emojiRegexText = require('emoji-regex/text.js');\n```\n\nAdditionally, in environments which support ES2015 Unicode escapes, you may `require` ES2015-style versions of the regexes:\n\n```js\nconst emojiRegexRGI = require('emoji-regex/es2015/RGI_Emoji.js');\nconst emojiRegex = require('emoji-regex/es2015/index.js');\nconst emojiRegexText = require('emoji-regex/es2015/text.js');\n```\n\n## For maintainers\n\n### How to update emoji-regex after new Unicode Standard releases\n\n1. Update the Unicode data dependency in `package.json` by running the following commands:\n\n    ```sh\n    # Example: updating from Unicode v12 to Unicode v13.\n    npm uninstall @unicode/unicode-12.0.0\n    npm install @unicode/unicode-13.0.0 --save-dev\n    ````\n\n1. Generate the new output:\n\n    ```sh\n    npm run build\n    ```\n\n1. Verify that tests still pass:\n\n    ```sh\n    npm test\n    ```\n\n1. Send a pull request with the changes, and get it reviewed & merged.\n\n1. On the `master` branch, bump the emoji-regex version number in `package.json`:\n\n    ```sh\n    npm version patch -m 'Release v%s'\n    ```\n\n    Instead of `patch`, use `minor` or `major` [as needed](https://semver.org/).\n\n    Note that this produces a Git commit + tag.\n\n1. Push the release commit and tag:\n\n    ```sh\n    git push               # push the commit\n    git push origin v0.1.2 # push the tag\n    ```\n\n    Our CI then automatically publishes the new release to npm.\n\n## Author\n\n| [![twitter/mathias](https://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](https://mathiasbynens.be/) |\n\n## License\n\n_emoji-regex_ is available under the [MIT](https://mths.be/mit) license.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-9.2.1.tgz#c9b25604256bb3428964bead3ab63069d736f7ee",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-9.2.1.tgz",
    "hash": "c9b25604256bb3428964bead3ab63069d736f7ee",
    "integrity": "sha512-117l1H6U4X3Krn+MrzYrL57d5H7siRHWraBs7s+LjRuFK7Fe7hJqnJ0skWlinqsycVLU5YAo6L8CsEYQ0V5prg==",
    "registry": "npm",
    "packageName": "emoji-regex",
    "cacheIntegrity": "sha512-117l1H6U4X3Krn+MrzYrL57d5H7siRHWraBs7s+LjRuFK7Fe7hJqnJ0skWlinqsycVLU5YAo6L8CsEYQ0V5prg== sha1-ybJWBCVrs0KJZL6tOrYwadc29+4="
  },
  "registry": "npm",
  "hash": "c9b25604256bb3428964bead3ab63069d736f7ee"
}